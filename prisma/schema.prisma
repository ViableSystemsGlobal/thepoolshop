generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                      String               @id @default(cuid())
  email                   String               @unique
  name                    String?
  phone                   String?
  image                   String?
  role                    UserRole             @default(SALES_REP)
  isActive                Boolean              @default(true)
  lastLoginAt             DateTime?
  emailVerified           DateTime?
  phoneVerified           DateTime?
  preferences             Json?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  password                String?
  userRoles               UserRoleAssignment[]
  accounts                Account[]
  auditLogs               AuditLog[]
  backorders              Backorder[]
  emailCampaigns          EmailCampaign[]
  emailMessages           EmailMessage[]
  leads                   Lead[]
  notifications           Notification[]
  proformas               Proforma[]
  quotations              Quotation[]
  createdRecurringTasks   RecurringTask[]      @relation("CreatedRecurringTasks")
  assignedRecurringTasks  RecurringTask[]      @relation("AssignedRecurringTasks")
  smsCampaigns            SmsCampaign[]
  smsMessages             SmsMessage[]
  taskAssignments         TaskAssignee[]       @relation("TaskAssignments")
  taskAttachments         TaskAttachment[]     @relation("TaskAttachments")
  completedChecklistItems TaskChecklistItem[]  @relation("CompletedChecklistItems")
  taskComments            TaskComment[]        @relation("TaskComments")
  createdTaskTemplates    TaskTemplate[]       @relation("CreatedTaskTemplates")
  createdTasks            Task[]               @relation("CreatedTasks")
  assignedTasks           Task[]               @relation("AssignedTasks")
  leadComments            LeadComment[]
  leadFiles               LeadFile[]
  leadEmails              LeadEmail[]
  leadSms                 LeadSMS[]
  leadProducts            LeadProduct[]
  leadMeetings            LeadMeeting[]
  distributorLeads        DistributorLead[]
  distributorLeadSMS      DistributorLeadSMS[]
  distributorLeadEmails   DistributorLeadEmail[]
  distributorLeadProducts DistributorLeadProduct[]
  distributors            Distributor[]
  distributorSMS          DistributorSMS[]
  distributorEmails       DistributorEmail[]
  distributorProducts     DistributorProduct[]
  creditHistory           DistributorCreditHistory[]
  creditApprovedDistributors Distributor[] @relation("CreditApprovedBy")
  orders                  Order[]

  @@map("users")
}

model Currency {
  id            String         @id @default(cuid())
  code          String         @unique
  name          String
  symbol        String
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  exchangeRates ExchangeRate[]

  @@map("currencies")
}

model ExchangeRate {
  id            String    @id @default(cuid())
  fromCurrency  String
  toCurrency    String
  rate          Float
  source        String
  effectiveFrom DateTime  @default(now())
  effectiveTo   DateTime?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  currency      Currency  @relation(fields: [fromCurrency], references: [code])

  @@unique([fromCurrency, toCurrency, effectiveFrom])
  @@map("exchange_rates")
}

model SystemSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  type        String   @default("string")
  category    String   @default("general")
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("system_settings")
}

model Category {
  id          String     @id @default(cuid())
  name        String
  description String?
  parentId    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("categories")
}

model Product {
  id                     String            @id @default(cuid())
  sku                    String            @unique
  name                   String
  description            String?
  images                 String?
  attributes             Json?
  uomBase                String            @default("pcs")
  uomSell                String            @default("pcs")
  price                  Float?
  cost                   Float?
  originalPrice          Float?
  originalCost           Float?
  originalPriceCurrency  String?
  originalCostCurrency   String?
  exchangeRateAtImport   Float?
  lastExchangeRateUpdate DateTime?
  baseCurrency           String            @default("GHS")
  active                 Boolean           @default(true)
  categoryId             String
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  costPrice              Float?
  backorders             Backorder[]
  priceListItems         PriceListItem[]
  documents              ProductDocument[]
  category               Category          @relation(fields: [categoryId], references: [id])
  proformaLines          ProformaLine[]
  quotationLines         QuotationLine[]
  stockItems             StockItem[]
  movements              StockMovement[]
  leadProducts           LeadProduct[]
  distributorLeadProducts DistributorLeadProduct[]
  distributorProducts    DistributorProduct[]
  orderItems             OrderItem[]

  @@map("products")
}

model ProductDocument {
  id           String   @id @default(cuid())
  filename     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  description  String?
  tags         String?
  isPublic     Boolean  @default(false)
  productId    String
  uploadedBy   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_documents")
}

model PriceList {
  id            String          @id @default(cuid())
  name          String
  channel       String          @default("direct")
  currency      String          @default("USD")
  effectiveFrom DateTime        @default(now())
  effectiveTo   DateTime?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  items         PriceListItem[]

  @@map("price_lists")
}

model PriceListItem {
  id           String    @id @default(cuid())
  productId    String
  priceListId  String
  unitPrice    Float
  basePrice    Float?
  exchangeRate Float?
  overrides    Json?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  product      Product   @relation(fields: [productId], references: [id])
  priceList    PriceList @relation(fields: [priceListId], references: [id])

  @@unique([productId, priceListId])
  @@map("price_list_items")
}

model Account {
  id            String        @id @default(cuid())
  name          String
  type          AccountType   @default(INDIVIDUAL)
  email         String?
  phone         String?
  address       String?
  city          String?
  state         String?
  country       String?
  website       String?
  notes         String?
  ownerId       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  owner         User          @relation(fields: [ownerId], references: [id])
  backorders    Backorder[]
  contacts      Contact[]
  opportunities Opportunity[]
  proformas     Proforma[]
  quotations    Quotation[]
  tasks         Task[]

  @@map("accounts")
}

model Contact {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String?
  phone     String?
  position  String?
  accountId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  account   Account  @relation(fields: [accountId], references: [id])

  @@map("contacts")
}

model Lead {
  id                String     @id @default(cuid())
  firstName         String
  lastName          String
  email             String?
  phone             String?
  company           String?
  source            String?
  status            LeadStatus @default(NEW)
  score             Int        @default(0)
  notes             String?
  subject           String?
  leadType          String     @default("INDIVIDUAL")
  assignedTo        String?    // JSON string of User array
  interestedProducts String?   // JSON string of Product array
  followUpDate      DateTime?
  // Opportunity-specific fields
  dealValue         Float?
  probability       Int?       // Win probability percentage
  expectedCloseDate DateTime?
  ownerId           String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  owner             User       @relation(fields: [ownerId], references: [id])
  tasks             Task[]
  comments          LeadComment[]
  files             LeadFile[]
  emails            LeadEmail[]
  sms               LeadSMS[]
  products          LeadProduct[]
  meetings          LeadMeeting[]

  @@map("leads")
}

model Opportunity {
  id          String           @id @default(cuid())
  name        String
  stage       OpportunityStage @default(NEW)
  value       Float?
  probability Int              @default(0)
  closeDate   DateTime?
  accountId   String
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  account     Account          @relation(fields: [accountId], references: [id])

  @@map("opportunities")
}

model Quotation {
  id         String          @id @default(cuid())
  number     String          @unique
  status     QuotationStatus @default(DRAFT)
  subject    String
  validUntil DateTime?
  notes      String?
  subtotal   Float           @default(0)
  tax        Float           @default(0)
  total      Float           @default(0)
  accountId  String
  ownerId    String
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  proformas  Proforma[]
  lines      QuotationLine[]
  account    Account         @relation(fields: [accountId], references: [id])
  owner      User            @relation(fields: [ownerId], references: [id])

  @@map("quotations")
}

model QuotationLine {
  id          String    @id @default(cuid())
  quotationId String
  productId   String
  quantity    Float
  unitPrice   Float
  discount    Float     @default(0)
  lineTotal   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  quotation   Quotation @relation(fields: [quotationId], references: [id])
  product     Product   @relation(fields: [productId], references: [id])

  @@map("quotation_lines")
}

model Proforma {
  id          String         @id @default(cuid())
  number      String         @unique
  status      ProformaStatus @default(DRAFT)
  subject     String
  validUntil  DateTime?
  notes       String?
  subtotal    Float          @default(0)
  tax         Float          @default(0)
  total       Float          @default(0)
  quotationId String?
  accountId   String
  ownerId     String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  lines       ProformaLine[]
  quotation   Quotation?     @relation(fields: [quotationId], references: [id])
  account     Account        @relation(fields: [accountId], references: [id])
  owner       User           @relation(fields: [ownerId], references: [id])

  @@map("proformas")
}

model ProformaLine {
  id         String   @id @default(cuid())
  proformaId String
  productId  String
  quantity   Float
  unitPrice  Float
  discount   Float    @default(0)
  lineTotal  Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  proforma   Proforma @relation(fields: [proformaId], references: [id])
  product    Product  @relation(fields: [productId], references: [id])

  @@map("proforma_lines")
}

model StockItem {
  id           String          @id @default(cuid())
  productId    String
  quantity     Float           @default(0)
  reserved     Float           @default(0)
  available    Float           @default(0)
  averageCost  Float           @default(0)
  totalValue   Float           @default(0)
  reorderPoint Float           @default(0)
  warehouseId  String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  product      Product         @relation(fields: [productId], references: [id])
  warehouse    Warehouse?      @relation(fields: [warehouseId], references: [id])
  movements    StockMovement[]

  @@unique([productId, warehouseId])
  @@map("stock_items")
}

model Warehouse {
  id               String          @id @default(cuid())
  name             String          @unique
  code             String          @unique
  address          String?
  city             String?
  country          String?
  image            String?
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  stockItems       StockItem[]
  fromMovements    StockMovement[] @relation("FromWarehouse")
  toMovements      StockMovement[] @relation("ToWarehouse")
  currentMovements StockMovement[] @relation("CurrentWarehouse")

  @@map("warehouses")
}

model StockMovement {
  id              String            @id @default(cuid())
  productId       String
  stockItemId     String
  type            StockMovementType
  quantity        Float
  unitCost        Float?
  totalCost       Float?
  fromWarehouseId String?
  toWarehouseId   String?
  warehouseId     String?
  reference       String?
  reason          String?
  notes           String?
  userId          String?
  createdAt       DateTime          @default(now())
  product         Product           @relation(fields: [productId], references: [id])
  stockItem       StockItem         @relation(fields: [stockItemId], references: [id])
  fromWarehouse   Warehouse?        @relation("FromWarehouse", fields: [fromWarehouseId], references: [id])
  toWarehouse     Warehouse?        @relation("ToWarehouse", fields: [toWarehouseId], references: [id])
  warehouse       Warehouse?        @relation("CurrentWarehouse", fields: [warehouseId], references: [id])

  @@map("stock_movements")
}

model Backorder {
  id                String            @id @default(cuid())
  orderNumber       String
  orderType         OrderType
  orderId           String
  productId         String
  quantity          Float
  quantityFulfilled Float             @default(0)
  quantityPending   Float
  unitPrice         Float
  lineTotal         Float
  status            BackorderStatus   @default(PENDING)
  priority          BackorderPriority @default(NORMAL)
  expectedDate      DateTime?
  notes             String?
  accountId         String
  ownerId           String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  fulfilledAt       DateTime?
  owner             User              @relation(fields: [ownerId], references: [id])
  account           Account           @relation(fields: [accountId], references: [id])
  product           Product           @relation(fields: [productId], references: [id])

  @@map("backorders")
}

model Activity {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  action     String
  details    Json?
  userId     String?
  createdAt  DateTime @default(now())

  @@map("activities")
}

model Role {
  id            String               @id @default(cuid())
  name          String               @unique
  description   String?
  isSystem      Boolean              @default(false)
  isActive      Boolean              @default(true)
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  roleAbilities RoleAbility[]
  userRoles     UserRoleAssignment[]
}

model Ability {
  id            String        @id @default(cuid())
  name          String        @unique
  resource      String
  action        String
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  roleAbilities RoleAbility[]
}

model RoleAbility {
  id        String  @id @default(cuid())
  roleId    String
  abilityId String
  ability   Ability @relation(fields: [abilityId], references: [id], onDelete: Cascade)
  role      Role    @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([roleId, abilityId])
}

model UserRoleAssignment {
  id         String    @id @default(cuid())
  userId     String
  roleId     String
  assignedBy String?
  assignedAt DateTime  @default(now())
  expiresAt  DateTime?
  isActive   Boolean   @default(true)
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model Notification {
  id          String             @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  data        Json?
  channels    Json
  status      NotificationStatus @default(PENDING)
  scheduledAt DateTime?
  sentAt      DateTime?
  readAt      DateTime?
  userId      String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  user        User               @relation(fields: [userId], references: [id])

  @@map("notifications")
}

model NotificationTemplate {
  id        String           @id @default(cuid())
  name      String           @unique
  type      NotificationType
  channels  Json
  subject   String?
  body      String
  variables Json?
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String
  action     String
  resource   String
  resourceId String?
  oldData    Json?
  newData    Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

model SmsMessage {
  id           String       @id @default(cuid())
  recipient    String
  message      String
  status       SmsStatus    @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  failedAt     DateTime?
  errorMessage String?
  cost         Float?
  provider     String?
  providerId   String?
  userId       String
  campaignId   String?
  isBulk       Boolean      @default(false)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  campaign     SmsCampaign? @relation(fields: [campaignId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@map("sms_messages")
}

model SmsCampaign {
  id          String         @id @default(cuid())
  name        String
  description String?
  recipients  Json
  message     String
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  completedAt DateTime?
  totalSent   Int            @default(0)
  totalFailed Int            @default(0)
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  messages    SmsMessage[]

  @@map("sms_campaigns")
}

model EmailMessage {
  id           String         @id @default(cuid())
  recipient    String
  subject      String
  message      String
  status       EmailStatus    @default(PENDING)
  sentAt       DateTime?
  deliveredAt  DateTime?
  failedAt     DateTime?
  errorMessage String?
  provider     String?
  providerId   String?
  userId       String
  campaignId   String?
  isBulk       Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  campaign     EmailCampaign? @relation(fields: [campaignId], references: [id])
  user         User           @relation(fields: [userId], references: [id])

  @@map("email_messages")
}

model EmailCampaign {
  id          String         @id @default(cuid())
  name        String
  description String?
  recipients  Json
  subject     String
  message     String
  status      CampaignStatus @default(DRAFT)
  scheduledAt DateTime?
  sentAt      DateTime?
  completedAt DateTime?
  totalSent   Int            @default(0)
  totalFailed Int            @default(0)
  userId      String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  messages    EmailMessage[]

  @@map("email_campaigns")
}

model Task {
  id                String              @id @default(cuid())
  title             String
  description       String?
  status            TaskStatus          @default(PENDING)
  priority          TaskPriority        @default(MEDIUM)
  dueDate           DateTime?
  completedAt       DateTime?
  assignedTo        String?
  assignmentType    AssignmentType      @default(INDIVIDUAL)
  createdBy         String
  estimatedDuration Int?
  actualDuration    Int?
  categoryId        String?
  leadId            String?
  accountId         String?
  templateId        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  recurringTaskId   String?
  assignees         TaskAssignee[]
  attachments       TaskAttachment[]
  checklistItems    TaskChecklistItem[]
  comments          TaskComment[]
  dependentTasks    TaskDependency[]    @relation("DependentTasks")
  dependencies      TaskDependency[]    @relation("TaskDependencies")
  recurringTask     RecurringTask?      @relation(fields: [recurringTaskId], references: [id])
  template          TaskTemplate?       @relation(fields: [templateId], references: [id])
  account           Account?            @relation(fields: [accountId], references: [id])
  lead              Lead?               @relation(fields: [leadId], references: [id])
  category          TaskCategory?       @relation(fields: [categoryId], references: [id])
  creator           User                @relation("CreatedTasks", fields: [createdBy], references: [id])
  assignee          User?               @relation("AssignedTasks", fields: [assignedTo], references: [id])

  @@map("tasks")
}

model TaskAssignee {
  id          String     @id @default(cuid())
  taskId      String
  userId      String
  status      TaskStatus @default(PENDING)
  completedAt DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation("TaskAssignments", fields: [userId], references: [id])
  task        Task       @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@map("task_assignees")
}

model RecurringTask {
  id            String            @id @default(cuid())
  title         String
  description   String?
  priority      TaskPriority      @default(MEDIUM)
  pattern       RecurrencePattern
  interval      Int               @default(1)
  daysOfWeek    Json?
  dayOfMonth    Int?
  assignedTo    String
  createdBy     String
  isActive      Boolean           @default(true)
  lastGenerated DateTime?
  nextDue       DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  creator       User              @relation("CreatedRecurringTasks", fields: [createdBy], references: [id])
  assignee      User              @relation("AssignedRecurringTasks", fields: [assignedTo], references: [id])
  tasks         Task[]

  @@map("recurring_tasks")
}

model TaskCategory {
  id          String         @id @default(cuid())
  name        String         @unique
  description String?
  color       String         @default("#3B82F6")
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  templates   TaskTemplate[]
  tasks       Task[]

  @@map("task_categories")
}

model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("TaskComments", fields: [userId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_comments")
}

model TaskAttachment {
  id           String   @id @default(cuid())
  taskId       String
  fileName     String
  originalName String
  filePath     String
  fileSize     Int
  mimeType     String
  uploadedBy   String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  uploader     User     @relation("TaskAttachments", fields: [uploadedBy], references: [id])
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_attachments")
}

model TaskDependency {
  id              String   @id @default(cuid())
  taskId          String
  dependsOnTaskId String
  createdAt       DateTime @default(now())
  dependsOnTask   Task     @relation("DependentTasks", fields: [dependsOnTaskId], references: [id], onDelete: Cascade)
  task            Task     @relation("TaskDependencies", fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, dependsOnTaskId])
  @@map("task_dependencies")
}

model TaskTemplate {
  id                String             @id @default(cuid())
  name              String
  description       String?
  priority          TaskPriority       @default(MEDIUM)
  estimatedDuration Int?
  categoryId        String?
  isActive          Boolean            @default(true)
  createdBy         String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  items             TaskTemplateItem[]
  creator           User               @relation("CreatedTaskTemplates", fields: [createdBy], references: [id])
  category          TaskCategory?      @relation(fields: [categoryId], references: [id])
  tasks             Task[]

  @@map("task_templates")
}

model TaskTemplateItem {
  id          String       @id @default(cuid())
  templateId  String
  title       String
  description String?
  order       Int          @default(0)
  isRequired  Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  template    TaskTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)

  @@map("task_template_items")
}

model TaskChecklistItem {
  id          String    @id @default(cuid())
  taskId      String
  title       String
  description String?
  isCompleted Boolean   @default(false)
  completedBy String?
  completedAt DateTime?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  completer   User?     @relation("CompletedChecklistItems", fields: [completedBy], references: [id])
  task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("task_checklist_items")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  SALES_MANAGER
  SALES_REP
  INVENTORY_MANAGER
  FINANCE_OFFICER
  EXECUTIVE_VIEWER
}

enum NotificationType {
  SYSTEM_ALERT
  STOCK_LOW
  ORDER_STATUS
  PAYMENT_RECEIVED
  USER_INVITED
  PASSWORD_RESET
  SECURITY_ALERT
  CUSTOM
}

enum NotificationChannel {
  EMAIL
  SMS
  WHATSAPP
  IN_APP
}

enum NotificationStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
  READ
}

enum AccountType {
  INDIVIDUAL
  COMPANY
  PROJECT
}

enum LeadStatus {
  NEW
  CONTACTED
  QUALIFIED
  CONVERTED
  LOST
  OPPORTUNITY
  NEW_OPPORTUNITY
  QUOTE_SENT
  QUOTE_REVIEWED
  NEGOTIATION
  APPROVED
  CONTRACT_SENT
  CONTRACT_SIGNED
  WON
}

enum OpportunityStage {
  NEW
  QUALIFIED
  PROPOSAL
  QUOTATION
  NEGOTIATION
  WON
  LOST
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum ProformaStatus {
  DRAFT
  SENT
  PAID
  CREDIT_APPROVED
  CANCELLED
}

model LeadComment {
  id        String   @id @default(cuid())
  leadId    String
  content   String
  isInternal Boolean @default(false)
  createdBy String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lead          Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  createdByUser User @relation(fields: [createdBy], references: [id])

  @@map("lead_comments")
}

model LeadFile {
  id          String   @id @default(cuid())
  leadId      String
  fileName    String
  filePath    String
  fileSize    Int
  mimeType    String
  description String?
  category    String   @default("DOCUMENT")
  uploadedBy  String
  uploadedAt  DateTime @default(now())

  lead           Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  uploadedByUser User @relation(fields: [uploadedBy], references: [id])

  @@map("lead_files")
}

model LeadEmail {
  id          String      @id @default(cuid())
  leadId      String
  to          String
  subject     String
  content     String
  type        String      @default("OUTBOUND")
  status      EmailStatus @default(PENDING)
  sentBy      String
  sentAt      DateTime?
  scheduledAt DateTime?

  lead        Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  sentByUser  User @relation(fields: [sentBy], references: [id])

  @@map("lead_emails")
}

model LeadSMS {
  id            String   @id @default(cuid())
  leadId        String
  to            String
  message       String
  type          String   @default("OUTBOUND")
  status        String   @default("PENDING")
  sentBy        String
  sentAt        DateTime?
  scheduledAt   DateTime?
  externalId    String?
  errorMessage  String?

  lead          Lead @relation(fields: [leadId], references: [id], onDelete: Cascade)
  sentByUser    User @relation(fields: [sentBy], references: [id])

  @@map("lead_sms")
}

enum StockMovementType {
  RECEIPT
  ADJUSTMENT
  TRANSFER_IN
  TRANSFER_OUT
  SALE
  RETURN
  DAMAGE
  THEFT
  EXPIRY
  OTHER
}

enum OrderType {
  QUOTATION
  PROFORMA
}

enum BackorderStatus {
  PENDING
  PARTIALLY_FULFILLED
  FULFILLED
  CANCELLED
}

enum BackorderPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

model LeadProduct {
  id            String   @id @default(cuid())
  leadId        String
  productId     String
  quantity      Int      @default(1)
  notes         String?
  interestLevel String   @default("MEDIUM")
  addedBy       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  lead          Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  product       Product  @relation(fields: [productId], references: [id])
  addedByUser   User     @relation(fields: [addedBy], references: [id])

  @@map("lead_products")
}

model LeadMeeting {
  id            String   @id @default(cuid())
  leadId        String
  type          String   // CALL, MEETING, VIDEO, DEMO
  title         String
  description   String?
  scheduledAt   DateTime
  duration      Int      @default(30) // in minutes
  status        String   @default("SCHEDULED") // SCHEDULED, CONFIRMED, COMPLETED, CANCELLED
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  lead          Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  createdByUser User     @relation(fields: [createdBy], references: [id])

  @@map("lead_meetings")
}

enum SmsStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum EmailStatus {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

enum AssignmentType {
  INDIVIDUAL
  COLLABORATIVE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum RecurrencePattern {
  DAILY
  WEEKLY
  MONTHLY
  CUSTOM
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  SENDING
  COMPLETED
  FAILED
  CANCELLED
}

model DistributorLead {
  id                      String                  @id @default(cuid())
  firstName               String
  lastName                String
  email                   String                  @unique
  phone                   String
  dateOfBirth             String?
  businessName            String
  businessType            String
  businessRegistrationNumber String?
  yearsInBusiness         Int?
  address                 String?
  city                    String
  region                  String
  country                 String                  @default("Ghana")
  postalCode              String?
  latitude                Float?
  longitude               Float?
  territory               String?
  expectedVolume          Int?
  experience              String?
  investmentCapacity      String?
  targetMarket            String?
  notes                   String?
  // Legacy image fields (to be migrated)
  profileImage            String?
  businessLicense         String?
  taxCertificate          String?
  status                  DistributorLeadStatus   @default(PENDING)
  submittedBy             String
  submittedByUser         User                    @relation(fields: [submittedBy], references: [id])
  images                  DistributorLeadImage[]
  smsMessages             DistributorLeadSMS[]
  emails                  DistributorLeadEmail[]
  interestedProducts      DistributorLeadProduct[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  @@map("distributor_leads")
}

model DistributorLeadImage {
  id                String          @id @default(cuid())
  distributorLeadId String
  fileName          String
  originalName      String
  filePath          String
  fileType          String
  fileSize          Int
  imageType         DistributorImageType
  uploadedAt        DateTime        @default(now())
  distributorLead   DistributorLead @relation(fields: [distributorLeadId], references: [id], onDelete: Cascade)

  @@map("distributor_lead_images")
}

model DistributorLeadSMS {
  id                String          @id @default(cuid())
  distributorLeadId String
  to                String
  message           String
  type              String          @default("OUTBOUND")
  status            String          @default("SENT")
  sentBy            String
  sentAt            DateTime        @default(now())
  errorMessage      String?
  distributorLead   DistributorLead @relation(fields: [distributorLeadId], references: [id], onDelete: Cascade)
  sentByUser        User            @relation(fields: [sentBy], references: [id])

  @@map("distributor_lead_sms")
}

model DistributorLeadEmail {
  id                String          @id @default(cuid())
  distributorLeadId String
  to                String
  subject           String
  content           String
  type              String          @default("OUTBOUND")
  status            String          @default("SENT")
  sentBy            String
  sentAt            DateTime        @default(now())
  messageId         String?
  errorMessage      String?
  distributorLead   DistributorLead @relation(fields: [distributorLeadId], references: [id], onDelete: Cascade)
  sentByUser        User            @relation(fields: [sentBy], references: [id])

  @@map("distributor_lead_emails")
}

model DistributorLeadProduct {
  id                String          @id @default(cuid())
  distributorLeadId String
  productId         String
  quantity          Int             @default(1)
  notes             String?
  interestLevel     String          @default("MEDIUM")
  addedBy           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  distributorLead   DistributorLead @relation(fields: [distributorLeadId], references: [id], onDelete: Cascade)
  product           Product         @relation(fields: [productId], references: [id])
  addedByUser       User            @relation(fields: [addedBy], references: [id])

  @@map("distributor_lead_products")
}

model Distributor {
  id                      String                  @id @default(cuid())
  firstName               String
  lastName                String
  email                   String                  @unique
  phone                   String
  dateOfBirth             String?
  businessName            String
  businessType            String
  businessRegistrationNumber String?
  yearsInBusiness         Int?
  address                 String?
  city                    String
  region                  String
  country                 String                  @default("Ghana")
  postalCode              String?
  latitude                Float?
  longitude               Float?
  territory               String?
  expectedVolume          Int?
  experience              String?
  investmentCapacity      String?
  targetMarket            String?
  notes                   String?
  // Legacy image fields (to be migrated)
  profileImage            String?
  businessLicense         String?
  taxCertificate          String?
  status                  DistributorStatus       @default(ACTIVE)
  approvedBy              String
  approvedAt              DateTime                @default(now())
  approvedByUser          User                    @relation(fields: [approvedBy], references: [id])
  
  // Credit Management Fields
  creditLimit             Decimal?                // Maximum credit allowed
  currentCreditUsed       Decimal?                @default(0) // Currently used credit
  creditTerms             String?                 // Payment terms (e.g., "Net 30", "Net 60")
  creditStatus            CreditStatus?           @default(ACTIVE) // Credit status
  lastCreditReview        DateTime?               // Last time credit was reviewed
  creditApprovedBy        String?                 // User who approved the credit limit
  creditApprovedAt        DateTime?               // When credit was approved
  creditApprovedByUser    User?                   @relation("CreditApprovedBy", fields: [creditApprovedBy], references: [id])
  nextCreditReview        DateTime?               // Next scheduled credit review
  
  // Relations
  images                  DistributorImage[]
  smsMessages             DistributorSMS[]
  emails                  DistributorEmail[]
  interestedProducts      DistributorProduct[]
  creditHistory           DistributorCreditHistory[]
  orders                  Order[]
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt

  @@map("distributors")
}

model DistributorImage {
  id                String          @id @default(cuid())
  distributorId     String
  fileName          String
  originalName      String
  filePath          String
  fileType          String
  fileSize          Int
  imageType         DistributorImageType
  uploadedAt        DateTime        @default(now())
  distributor       Distributor     @relation(fields: [distributorId], references: [id], onDelete: Cascade)

  @@map("distributor_images")
}

model DistributorSMS {
  id                String          @id @default(cuid())
  distributorId     String
  to                String
  message           String
  type              String          @default("OUTBOUND")
  status            String          @default("SENT")
  sentBy            String
  sentAt            DateTime        @default(now())
  errorMessage      String?
  distributor       Distributor     @relation(fields: [distributorId], references: [id], onDelete: Cascade)
  sentByUser        User            @relation(fields: [sentBy], references: [id])

  @@map("distributor_sms")
}

model DistributorEmail {
  id                String          @id @default(cuid())
  distributorId     String
  to                String
  subject           String
  content           String
  type              String          @default("OUTBOUND")
  status            String          @default("SENT")
  sentBy            String
  sentAt            DateTime        @default(now())
  messageId         String?
  errorMessage      String?
  distributor       Distributor     @relation(fields: [distributorId], references: [id], onDelete: Cascade)
  sentByUser        User            @relation(fields: [sentBy], references: [id])

  @@map("distributor_emails")
}

model DistributorProduct {
  id                String          @id @default(cuid())
  distributorId     String
  productId         String
  quantity          Int             @default(1)
  notes             String?
  interestLevel     String          @default("MEDIUM")
  addedBy           String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  distributor       Distributor     @relation(fields: [distributorId], references: [id], onDelete: Cascade)
  product           Product         @relation(fields: [productId], references: [id])
  addedByUser       User            @relation(fields: [addedBy], references: [id])

  @@map("distributor_products")
}

model DistributorCreditHistory {
  id                String          @id @default(cuid())
  distributorId     String
  action            String          // CREDIT_LIMIT_SET, CREDIT_LIMIT_INCREASED, CREDIT_LIMIT_DECREASED, CREDIT_USED, PAYMENT_RECEIVED, CREDIT_REVIEWED
  previousLimit     Decimal?        // Previous credit limit
  newLimit          Decimal?        // New credit limit
  previousUsed      Decimal?        // Previous credit used
  newUsed           Decimal?        // New credit used
  amount            Decimal?        // Amount involved in the action
  reason            String?         // Reason for the change
  notes             String?         // Additional notes
  performedBy       String          // User who performed the action
  performedAt       DateTime        @default(now())
  distributor       Distributor     @relation(fields: [distributorId], references: [id], onDelete: Cascade)
  performedByUser   User            @relation(fields: [performedBy], references: [id])

  @@map("distributor_credit_history")
}

enum DistributorLeadStatus {
  PENDING
  UNDER_REVIEW
  APPROVED
  REJECTED
}

enum DistributorStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum CreditStatus {
  ACTIVE
  SUSPENDED
  OVERDUE
  UNDER_REVIEW
}

enum DistributorImageType {
  PROFILE_PICTURE
  BUSINESS_PREMISES
  BUSINESS_LICENSE
  TAX_CERTIFICATE
  ID_DOCUMENT
  BANK_STATEMENT
  REFERENCE_LETTER
  DISTRIBUTOR_AGREEMENT
  SERVICE_CONTRACT
  TERMS_CONDITIONS
  OTHER
}

model Order {
  id              String      @id @default(cuid())
  orderNumber     String      @unique
  distributorId   String
  totalAmount     Decimal
  status          OrderStatus @default(PENDING)
  paymentMethod   String      @default("credit") // credit, cash, bank_transfer
  notes           String?
  deliveryAddress String?
  deliveryDate    DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  createdBy       String
  distributor     Distributor @relation(fields: [distributorId], references: [id], onDelete: Cascade)
  items           OrderItem[]
  createdByUser   User        @relation(fields: [createdBy], references: [id])

  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  productId   String
  quantity    Int
  unitPrice   Decimal
  totalPrice  Decimal
  notes       String?
  order       Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}
